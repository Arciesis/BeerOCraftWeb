security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:

        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'argon2i'
        App\Entity\User:
            algorithm: argon2i

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/dashboard/login
            stateless: true
            json_login:
                check_path: /dashboard/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        refresh:
            pattern: ^/dashboard/token/refresh
            stateless: true
#            anonymous: true
        api:
            pattern: ^/dashboard
            stateless: true
#            guard:
#                authenticators:
#                    - lexik_jwt_authentication.jwt_token_authenticator
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: /dashboard/token/refresh

#            json_login:
#                check_path: /dashboard/login_check
#                success_handler: lexik_jwt_authentication.handler.authentication_success
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure


                #            anonymous: true
#                thentication.jwt_authenticator
#            jwt: ~

#        main:
##            anonymous: true
#            lazy: true
#            custom_authenticator: App\Security\MyCustomAuthenticator
#            provider: app_user_provider
#            custom_authenticators: ~
#             logout:
#                 path: app_logout
                # where to redirect after logout
                # target: app_any_route
            # previous authentication
            # lazy: true
#             provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
#        - { path: ^/dashboard/beer_recipes, roles: PUBLIC_ACCESS }
#        - { path: ^/dashboard/token/refresh, roles: PUBLIC_ACCESS}
#        - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/dashboard/(login|token/refresh|register), roles: PUBLIC_ACCESS }
#        - { path: ^/dashboard/users, roles: PUBLIC_ACCESS }
        - { path: ^/dashboard/docs, roles: PUBLIC_ACCESS }
        - { path: ^/dashboard, roles: IS_AUTHENTICATED_FULLY }

